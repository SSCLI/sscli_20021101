# ==++==
#
#   
#    Copyright (c) 2002 Microsoft Corporation.  All rights reserved.
#   
#    The use and distribution terms for this software are contained in the file
#    named license.txt, which can be found in the root of this distribution.
#    By using this software in any fashion, you are agreeing to be bound by the
#    terms of this license.
#   
#    You must not remove this notice, or any other, from this software.
#   
#
# ==--==
#
# sources.cor
#
# Common sources directives for all of COR.
# The line 
#
#   !include "$(NTMAKEENV)\sources.cor"
#
# should be the first line in all of COR's sources files

MAJORCOMP           =cor
SUBSYSTEM_VERSION   =4.00
USE_PDB_TO_COMPILE  =1

# By default we use this entry point in all DLLs. If you want something else, set it
# in your sources file.
DLLENTRY            =_DllMainCRTStartup

# Test Build System Support
!IFNDEF TESTBIN
TESTBIN=$(CORBASE)\tst\testbin
!ENDIF

!IFNDEF TESTSRC
TESTSRC=$(CORBASE)\tst\testsrc
!ENDIF


#######################################################################################
#
# As we don't want any proxy or stub files (at least for now;
# an interesting idea to add same!) we make the file names
# used for these file to be nul. MIDL_OPTIMIZATION is a macro
# that happens to get passed through LAST (!) to the MIDL compiler,
# allowing us to override pretty much anything that makefile.def
# is doing instead.
#
!IF "$(_TGTOS)"=="NT64"
MIDL_DEFAULT_OPTIMIZATION   =/Oicf /win64
!ELSE
MIDL_DEFAULT_OPTIMIZATION   =/Oicf
!ENDIF
MIDL_HEADER_AND_IID         =$(MIDL_DEFAULT_OPTIMIZATION)          /dlldata nul /proxy nul
MIDL_HEADER_ONLY            =$(MIDL_DEFAULT_OPTIMIZATION) /iid nul /dlldata nul /proxy nul
MIDL_EVERYTHING				=$(MIDL_DEFAULT_OPTIMIZATION)

# This is the macro that the IDL build line actually sees. It's 
# last on the command line, so takes precedence.
#
MIDL_OPTIMIZATION           =$(MIDL_DEFAULT_OPTIMIZATION) $(COR_MIDL_FLAGS)

# If you want in your sources file to control which files MIDL generates, then
# set the COR_MIDL_FLAGS macro. The following:
#
#		COR_MIDL_FLAGS    =$(MIDL_HEADER_ONLY)
#		COR_MIDL_FLAGS    =$(MIDL_HEADER_AND_IID)
#		COR_MIDL_FLAGS    =$(MIDL_EVERYTHING)
#
# are the common settings, though fancier ones are possible by setting various 
# of the generated files to be built to the file named 'nul'. The default is
# to only emit the header; if you want for example the typelib you need to override.
#
COR_MIDL_FLAGS            =$(MIDL_HEADER_ONLY)

#make sure this has a space at the end of the line
CORBUILDENV = $(DDKBUILDENV)\ 


#######################################################################################

# If you need to link a library that is built by COR itself, 
# then use (for example)
#
#       $(CORLIBS)\util.lib
#
# as the name of said library. If you need a special non-COR library,
# use
#       $(SDK_LIB_PATH)\oldnames.lib
#
!ifndef CORLIBS
CORLIBS             = $(CORBASE)\bin\$(TARGET_DIRECTORY)\$(DDKBUILDENV)
!endif

#
# When linking Win32 DLLs and EXEs, we have a standard set of libraries that
# we use. For a DLL (aka DYNLINK) you don't have to say anything special in
# your SOURCES file to get these, as the definition of WIN32DLL_LIBS below
# takes care of that. However, for EXEs you'll have to do something special,
# like
#           UMLIBS  = $(CORWIN32_LIBS)
# 
# However, depending on your situation, TARGETLIBS or LINKLIBS might be more 
# appropriate. See Build.Hlp for info.
#
# We must be sure to link against thunk libs before any Win32 libs.  
# COR binaries that must run on both Win95 and NT must link against the
# thunks. Those rare few that are NT-only can chose to not do so by setting
#
#       CORTHUNKLIBS =
#
# in their Sources file.
#
# Components that use the shared version of MFC (and not MFCSubs) need to stay
# away from using our own version of heap allocation (malloc, free, etc). To do so
# they should define
#
#       CORPERFLIBS =
#
# in their Sources file.
#
CORPERFLIBS	        =
CORTHUNKLIBS        =
CORWIN32_LIBS       =$(CORTHUNKLIBS) 	$(CORPERFLIBS)
!ifndef PLATFORM_UNIX
CORWIN32_LIBS       =$(CORWIN32_LIBS)   $(SDK_LIB_PATH)\user32.lib $(SDK_LIB_PATH)\kernel32.lib $(SDK_LIB_PATH)\gdi32.lib
CORWIN32_LIBS       =$(CORWIN32_LIBS)   $(SDK_LIB_PATH)\ole32.lib $(SDK_LIB_PATH)\oleaut32.lib
CORWIN32_LIBS       =$(CORWIN32_LIBS)   $(SDK_LIB_PATH)\uuid.lib $(SDK_LIB_PATH)\advapi32.lib $(SDK_LIB_PATH)\rpcndr.lib
CORWIN32_LIBS       =$(CORWIN32_LIBS)   $(SDK_LIB_PATH)\rpcrt4.lib $(SDK_LIB_PATH)\rpcns4.lib
CORWIN32_LIBS       =$(CORWIN32_LIBS)   $(SDK_LIB_PATH)\comctl32.lib
!endif

#
# By setting WIN32DLL_LIBs we set the default for DYNLINK to be what we want
# so you don't have to say anything special in sources
#
WIN32DLL_LIBS       =$(CORWIN32_LIBS)




#######################################################################################
#
# Set our include paths to be the tree of 'inc'lude directories above
# us. Each is assumed, if it exists, to be a include directory of increasingly
# greater degree of public disclosure.
#
#INCLUDES=.\inc;.;..\inc;..\..\inc;..\..\..\inc;..\..\..\..\inc;
#INCLUDES=d:\ia64sdk\include;d:\com98\inc
INCLUDES=$(INCLUDES);$(CORBASE)\src\inc\version

# These are include files under #ifdefs in the environment header files.
CONDITIONAL_INCLUDES = ntmppc.h ntia64.h winwlm.h macname1.h macpub.h macapi.h macname2.h values.h


#######################################################################################
#
# Setup paths indicating where targets should be built to.
#
TARGETCORBIN        = $(CORBASE)\bin
TARGETCORLIB        = $(CORBASE)\bin


#######################################################################################
#
# Control the extraction of .dbg files and the use of incremental linking.
#
# .dbg files are produced only on the build machine, not on developers' workstations.
# When produced, the are placed in the Symbols subdirectory of the build directory,
# e.g.:
#           \COR\bin\i386\checked\Symbols\...
#
# Incremental linking is used only in checked builds, and only not on the build machine
# (using incremental linking requires the use of .PDBs).
#
# When splitsym'ing DLL/EXEs, we also copy the .PDBs for mere libraries.

!ifndef COR_BUILD_MACHINE
COR_BUILD_MACHINE     =0
!endif

!if $(COR_BUILD_MACHINE)

NTDBGFILES              =1
_NTTREE                 =$(TARGETCORBIN)\$(TARGET_DIRECTORY)\$(DDKBUILDENV)
CUSTOM_BINPLACE_CMD     =splitsym -a $(BINPLACE_DBGFLAGS_NT) $@
!undef USE_PDB
!undef USE_INCREMENTAL_LINKING
PLACE_LIBRARY_PDB       =$(_NTTREE)\Symbols


!else

# Setup the binplace command to copy binaries.
!if "$(TARGETCOMPLUS)" != ""
_NTTREE                 =$(TARGETCOMPLUS)
BINPLACE_PLACEFILE	=$(CORENV)\bin\placefil.txt
BINPLACE_FLAGS = $(BINPLACE_FLAGS) -f 
!endif

USE_PDB                  =1
! if $(FREEBUILD) || $(IA64)
# leave USE_INCREMENTAL_LINKING undefined on free builds - makefile.def
# tests for defined/undefined, not 0/1
! else
USE_INCREMENTAL_LINKING  =1
! endif

!endif


#######################################################################################
#
# Various forms of exception handling that we can use
#
!ifdef PLATFORM_UNIX
FULLCXXEH           =
SYNCCXXEH           =
SEHONLY             =
!ELSEIF $(386) || $(ROTOR_X86)
FULLCXXEH           = /EHs- /EHa  /EHc-
SYNCCXXEH           = /EHs  /EHa- /EHc-
SEHONLY             = /EHs- /EHa- /EHc-
!ELSEIF $(IA64)
FULLCXXEH           = /EHs- /EHa  /EHc-
SYNCCXXEH           = /EHs  /EHa- /EHc-
SEHONLY             = /EHs- /EHa- /EHc-
!ELSEIF $(AXP64)
!  error 64 bit alpha targets not supported yet.
!ELSE
!  error Unknown CPU type
!endif

# Set the default exception handling paradigm. In a local Sources file you
# can use, eg, to override
#
# EXCEPTION_HANDLING  = $(FULLCXXEH)
# EXCEPTION_HANDLING  = $(SYNCCXXEH)
EXCEPTION_HANDLING = $(SEHONLY)


#######################################################################################
#
# Allow minimal rebuild in the checked builds
#
!if $(FREEBUILD) || $(IA64)
!else
USE_INCREMENTAL_COMPILING=1
!endif

#######################################################################################
#
# Turn off /FC flag for X86 compiler.
#
!if $(386) || $(ALPHA) || $(ROTOR_X86) || $(PPC) || $(SPARC)
CL_OPT_FC = 
!endif

#######################################################################################
#
# The actual set of flags passed to the compiler. Set COR_C_FLAGS if you
# want something special.
#
USER_C_FLAGS        = $(EXCEPTION_HANDLING) $(COR_C_FLAGS)


#######################################################################################
#
# Allow custom resource compiler flags for COR
#
RCOPTIONS           = $(RCOPTIONS) $(COR_RCOPTIONS)

#######################################################################################
#
# Use a global warning-control file.
#
!if "$(PLATFORM_UNIX)" != "1"
COMPILER_WARNINGS   =/WX /FI$(CORBASE)\src\inc\WarningControl.h
!else
COMPILER_WARNINGS   = -Wall -Wno-non-virtual-dtor -Wno-non-template-friend
!endif

#######################################################################################
#
# compile in the EE test object
#
TEMPEETEST   = 1

#######################################################################################
#
# We have a pair of global version files on which .res files should depend.
#
!undef DEFAULT_VERSION_FILE
MASTER_VERSION_FILE =$(CORBASE)\src\inc\version\__official__.ver $(CORBASE)\src\inc\version\__private__.ver 


!ifdef COR_MSVC

#
#  settings to utilize custom COR VC++ compiler
#
! undef USE_MSVCRT
! if $(386) || $(ROTOR_X86)
CUSTOM_LINKER   = $(NTMAKEENV)\i386\cor\link.exe
COR_C_FLAGS   = /Bx$(NTMAKEENV)\i386\cor\c1xx.dll /B2$(NTMAKEENV)\i386\cor\c2.dll /Gi-

EXCEPTION_HANDLING  =
PATH            = $(NTMAKEENV)\i386\cor;$(PATH)
! endif
LINKER_FLAGS    = -incremental:no

!endif # COR_MSVC





###############################################################################
#
# If CRT is not allowed, throw right compiler switches but still use
# the msvcrt.dll per NT.
#
! ifdef NO_CRT

USER_C_FLAGS		=$(EXCEPTION_HANDLING) $(COR_C_FLAGS) -DNO_CRT
NO_NTDLL			=1
!undef USE_LIBCMT

! endif

###############################################################################
#
# Pathname for the managed compiler.
!if "$(TARGETCOMPLUS)" != ""
MANAGED_COMPILER			= $(CORENV)\bin\devlkg\csc
MANAGED_VCDIR				= $(CORENV)\bin\devlkg
!else
MANAGED_COMPILER			= $(CORBASE)\bin\csc\csc
MANAGED_VCDIR				= $(CORBASE)\bin\vc
!endif
