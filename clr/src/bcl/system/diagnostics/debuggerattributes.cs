// ==++==
// 
//   
//    Copyright (c) 2002 Microsoft Corporation.  All rights reserved.
//   
//    The use and distribution terms for this software are contained in the file
//    named license.txt, which can be found in the root of this distribution.
//    By using this software in any fashion, you are agreeing to be bound by the
//    terms of this license.
//   
//    You must not remove this notice, or any other, from this software.
//   
// 
// ==--==
/*============================================================
**
** Class:  DebuggerAttributes
**
**                                                       
**
** Purpose: Attributes for debugger
**
** Date:  Feb 01, 2000
** 
===========================================================*/
    


namespace System.Diagnostics {
    /// <include file='doc\DebuggerAttributes.uex' path='docs/doc[@for="DebuggerStepThroughAttribute"]/*' />
    [Serializable, AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Method | AttributeTargets.Constructor, Inherited = false)]
    public sealed class DebuggerStepThroughAttribute : Attribute
	{
		/// <include file='doc\DebuggerAttributes.uex' path='docs/doc[@for="DebuggerStepThroughAttribute.DebuggerStepThroughAttribute"]/*' />
		public DebuggerStepThroughAttribute () {}
	} 

    /// <include file='doc\DebuggerAttributes.uex' path='docs/doc[@for="DebuggerHiddenAttribute"]/*' />
    [Serializable, AttributeUsage(AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Constructor, Inherited = false)]
    public sealed class DebuggerHiddenAttribute : Attribute
	{
	   /// <include file='doc\DebuggerAttributes.uex' path='docs/doc[@for="DebuggerHiddenAttribute.DebuggerHiddenAttribute"]/*' />
	   public DebuggerHiddenAttribute () {}
	}

   // Attribute class used by the compiler to mark modules.  
	// If present, then debugging information for everything in the
   // assembly was generated by the compiler, and will be preserved
   // by the Runtime so that the debugger can provide full functionality
   // in the case of JIT attach. If not present, then the compiler may
   // or may not have included debugging information, and the Runtime
   // won't preserve the debugging info, which will make debugging after
   // a JIT attach difficult.
    /// <include file='doc\DebuggerAttributes.uex' path='docs/doc[@for="DebuggableAttribute"]/*' />
	[AttributeUsage(AttributeTargets.Assembly|AttributeTargets.Module, AllowMultiple = false)]
    public sealed class DebuggableAttribute : Attribute
    {
		bool m_isJITTrackingEnabled;
		bool m_isJITOptimizerDisabled;
		
		/// <include file='doc\DebuggerAttributes.uex' path='docs/doc[@for="DebuggableAttribute.DebuggableAttribute"]/*' />
		public DebuggableAttribute(bool isJITTrackingEnabled,
								   bool isJITOptimizerDisabled)
		{
			m_isJITTrackingEnabled = isJITTrackingEnabled;
			m_isJITOptimizerDisabled = isJITOptimizerDisabled;
		}

        /// <include file='doc\DebuggerAttributes.uex' path='docs/doc[@for="DebuggableAttribute.IsJITTrackingEnabled"]/*' />
        public bool IsJITTrackingEnabled
        {
            get { return m_isJITTrackingEnabled; }
        }

        /// <include file='doc\DebuggerAttributes.uex' path='docs/doc[@for="DebuggableAttribute.IsJITOptimizerDisabled"]/*' />
        public bool IsJITOptimizerDisabled
        {
            get { return m_isJITOptimizerDisabled; }
        }
    }
}

