// ==++==
// 
//   
//    Copyright (c) 2002 Microsoft Corporation.  All rights reserved.
//   
//    The use and distribution terms for this software are contained in the file
//    named license.txt, which can be found in the root of this distribution.
//    By using this software in any fashion, you are agreeing to be bound by the
//    terms of this license.
//   
//    You must not remove this notice, or any other, from this software.
//   
// 
// ==--==
/* ------------------------------------------------------------------------- *
 * Common Language Runtime Verifier / Validator Interace
 *
 * Purpose: IValidator is used to staticly validate COR images.
 *
 * Protocol:
 *
 * Client CoCreates CorHost.Validator, 
 *      Calls Validate()
 *          [in/optional] IVEHandler for error callbacks on error
 *          [in/optional] Appdomain to use for validating assemblies
 *
 *      On Error, Validator calls IVEHandler.VEHandler() method. 
 *          (IVEHandler supplied by the client).
 *          VEHandler() could return CONTINUE / STOP ...
 *
 *      VEHandler() can call Validator.FormatEventInfo()  to get a detailed 
 *          error message on any error passed to IVEHandler.
 *
 * ------------------------------------------------------------------------- */

/* ------------------------------------------------------------------------- *
 * Imported types
 * ------------------------------------------------------------------------- */



/* ------------------------------------------------------------------------- *
 * Forward declarations
 * ------------------------------------------------------------------------- */

interface IValidator;
interface ILoader;


/* ------------------------------------------------------------------------- *
 * IValidator interface
 * ------------------------------------------------------------------------- */
[
 object,
 uuid(63DF8730-DC81-4062-84A2-1FF943F59FAC),
 pointer_default(unique)
]
interface IValidator : IUnknown
{
	HRESULT Validate(
			[in] IVEHandler        *veh,
			[in] IUnknown          *pAppDomain,
			[in] unsigned long      ulFlags,
			[in] unsigned long      ulMaxError,
			[in] unsigned long      token,
			[in] LPWSTR             fileName,
			[in, size_is(ulSize)] BYTE *pe,
			[in] unsigned long      ulSize);

    HRESULT FormatEventInfo(
			[in] HRESULT            hVECode,
			[in] VEContext          Context,
			[in, out] LPWSTR        msg,
			[in] unsigned long      ulMaxLength,
			[in] SAFEARRAY(VARIANT) psa);
};

